{"remainingRequest":"C:\\xampp\\htdocs\\2205 - design project fin\\peekabooklib\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\2205 - design project fin\\peekabooklib\\client\\src\\components\\UserServices.vue?vue&type=template&id=40112cf9&scoped=true&","dependencies":[{"path":"C:\\xampp\\htdocs\\2205 - design project fin\\peekabooklib\\client\\src\\components\\UserServices.vue","mtime":1608460834125},{"path":"C:\\xampp\\htdocs\\2205 - design project fin\\peekabooklib\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605868004384},{"path":"C:\\xampp\\htdocs\\2205 - design project fin\\peekabooklib\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1605868188643},{"path":"C:\\xampp\\htdocs\\2205 - design project fin\\peekabooklib\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605868004384},{"path":"C:\\xampp\\htdocs\\2205 - design project fin\\peekabooklib\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1605868188639}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}