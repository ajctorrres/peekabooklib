{"remainingRequest":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\src\\components\\Filters.vue?vue&type=template&id=61dd607b&scoped=true&","dependencies":[{"path":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\src\\components\\Filters.vue","mtime":1608346427198},{"path":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}