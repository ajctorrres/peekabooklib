{"remainingRequest":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\src\\components\\CheckOutDetails.vue?vue&type=template&id=141b8a3c&scoped=true&","dependencies":[{"path":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\src\\components\\CheckOutDetails.vue","mtime":1608325338678},{"path":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\nodeJS\\peekabookf\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}